# -*- coding: utf-8 -*-
"""Random Forest

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1V6gYNTLkNHeFe7ABQg3FEOS39-K16Uo4
"""

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report

import csv
import pandas as pd

heart_csv = pd.read_csv('heart.csv')
o2_csv = pd.read_csv('o2Saturation.csv')
placement_csv = pd.read_csv('Placement_Data_Full_Class.csv')
weather_csv = pd.read_csv('weatherAUS_parsed.csv')
house_csv = pd.read_csv('housePrices.csv')

classifier = RandomForestClassifier(n_estimators=100)

X = heart_csv.drop(columns=['target'])
y = heart_csv['target']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

classifier.fit(X_train, y_train)

y_pred = classifier.predict(X_test)

print(accuracy_score(y_test, y_pred))

print(confusion_matrix(y_test, y_pred))

print(classification_report(y_test, y_pred))

X = house_csv.drop(columns=['Beds','Zip'])
y = house_csv['Beds']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

classifier.fit(X_train, y_train)

y_pred = classifier.predict(X_test)

print(accuracy_score(y_test, y_pred))

print(confusion_matrix(y_test, y_pred))

print(classification_report(y_test, y_pred))

X = weather_csv.drop(columns=['Location','MinTemp','MaxTemp','Rainfall','WindGustDir','WindGustSpeed','WindDir9am','WindDir3pm','WindSpeed9am','WindSpeed3pm','Humidity9am','Humidity3pm','Pressure9am','Pressure3pm','Cloud9am','Cloud3pm','Temp9am','Temp3pm','RainToday','RainTomorrow'])
y = weather_csv['Binary RainTomorrow']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

classifier.fit(X_train, y_train)

y_pred = classifier.predict(X_test)

print(accuracy_score(y_test, y_pred))

print(confusion_matrix(y_test, y_pred))

print(classification_report(y_test, y_pred))

X = placement_csv.drop(columns=['salary','gender','ssc_b','hsc_b','hsc_s','degree_t','workex','specialisation','status'])
y = placement_csv['status']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

classifier.fit(X_train, y_train)

y_pred = classifier.predict(X_test)

print(accuracy_score(y_test, y_pred))

print(confusion_matrix(y_test, y_pred))

print(classification_report(y_test, y_pred))